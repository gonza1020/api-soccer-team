/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dux.api_soccer_team.controller;

import com.dux.api_soccer_team.dto.ErrorResponse;
import com.dux.api_soccer_team.dto.SoccerTeamResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.apache.coyote.BadRequestException;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "SoccerTeam", description = "Everything about Football teams")
public interface SoccerTeamApi {

    /**
     * POST /equipos : Add a new Soccer Team to the service
     *
     * @param soccerTeamResponse  (required)
     * @return Invalid request (status code 400)
     *         or Soccer team added succesfully (status code 201)
     */
    @Operation(
        operationId = "addSoccerTeam",
        summary = "Add a new Soccer Team to the service",
        tags = { "SoccerTeam" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "201", description = "Soccer team added succesfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SoccerTeamResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/equipos",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<SoccerTeamResponse> addSoccerTeam(
        @Parameter(name = "SoccerTeam", description = "", required = true) @Valid @RequestBody SoccerTeamResponse soccerTeamResponse
    );


    /**
     * DELETE /equipos/{id} : Delete a Soccer Team.
     *
     * @param id The user ID (required)
     * @return No content (status code 202)
     *         or Soccer team not found (status code 404)
     */
    @Operation(
        operationId = "deleteSoccerTeam",
        summary = "Delete a Soccer Team.",
        tags = { "SoccerTeam" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No content"),
            @ApiResponse(responseCode = "404", description = "Soccer team not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/equipos/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteSoccerTeam(
        @Min(1) @Parameter(name = "id", description = "The user ID", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /equipos : Get soccer teams
     *
     * @return Soccer teams (status code 200)
     */
    @Operation(
        operationId = "getAllSoccerTeams",
        summary = "Get soccer teams",
        tags = { "SoccerTeam" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Soccer teams", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SoccerTeamResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/equipos",
        produces = { "application/json" }
    )
    ResponseEntity<List<SoccerTeamResponse>> getAllSoccerTeams(
        
    );


    /**
     * GET /equipos/{id} : Get a Soccer Team.
     *
     * @param id The user ID (required)
     * @return Soccer team by id (status code 200)
     *         or Soccer team not found (status code 404)
     */
    @Operation(
        operationId = "getSoccerTeamById",
        summary = "Get a Soccer Team.",
        tags = { "SoccerTeam" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Soccer team by id", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SoccerTeamResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Soccer team not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/equipos/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<SoccerTeamResponse> getSoccerTeamById(
        @Min(1) @Parameter(name = "id", description = "The user ID", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) throws BadRequestException;


    /**
     * GET /equipos/buscar : Get a Soccer Team by name.
     *
     * @param nombre The team name. (required)
     * @return Soccer team by id (status code 200)
     *         or Soccer team not found (status code 404)
     */
    @Operation(
        operationId = "getSoccerTeamByName",
        summary = "Get a Soccer Team by name.",
        tags = { "SoccerTeam" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Soccer team by id", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SoccerTeamResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Soccer team not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/equipos/buscar",
        produces = { "application/json" }
    )
    ResponseEntity<SoccerTeamResponse> getSoccerTeamByName(
        @NotNull @Parameter(name = "nombre", description = "The team name.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "nombre", required = true) String nombre
    );


    /**
     * PUT /equipos/{id} : Update a Soccer Team.
     *
     * @param id The user ID (required)
     * @param soccerTeamResponse  (required)
     * @return Soccer team updated succesfully (status code 200)
     *         or Soccer team not found (status code 404)
     */
    @Operation(
        operationId = "updateSoccerTeam",
        summary = "Update a Soccer Team.",
        tags = { "SoccerTeam" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Soccer team updated succesfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SoccerTeamResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Soccer team not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/equipos/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<SoccerTeamResponse> updateSoccerTeam(
        @Min(1) @Parameter(name = "id", description = "The user ID", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "SoccerTeam", description = "", required = true) @Valid @RequestBody SoccerTeamResponse soccerTeamResponse
    );

}
